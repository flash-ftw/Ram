import { useState } from "react";
import { useLocation } from "wouter";
import { Helmet } from "react-helmet";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { ArrowLeft, CreditCard, LucidePhone, MapPin, Send } from "lucide-react";
import { useTranslation } from "react-i18next";
import { useLanguage } from "@/contexts/LanguageContext";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { 
  Form, 
  FormControl, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage 
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { useCart } from "@/contexts/CartContext";
import { formatPrice } from "@/lib/utils";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

// Type for our form values
type CheckoutFormValues = z.infer<typeof z.object({
  name: z.string(),
  email: z.string(),
  phone: z.string(),
  location: z.string(),
  notes: z.string().optional(),
})>;

const Checkout = () => {
  const [, setLocation] = useLocation();
  const { state: cartState, clearCart } = useCart();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showBankDetails, setShowBankDetails] = useState(false);
  const [orderConfirmed, setOrderConfirmed] = useState(false);
  const [orderNumber, setOrderNumber] = useState<number | null>(null);
  const { t } = useTranslation('common');
  const { isRTL } = useLanguage();
  
  // Form validation schema with translations
  const checkoutSchema = z.object({
    name: z.string().min(2, { message: t('checkout.formErrors.nameMinLength') }),
    email: z.string().email({ message: t('checkout.formErrors.emailInvalid') }),
    phone: z.string().min(8, { message: t('checkout.formErrors.phoneInvalid') }),
    location: z.string().min(5, { message: t('checkout.formErrors.locationRequired') }),
    notes: z.string().optional(),
  });
  
  // Initialize form
  const form = useForm<CheckoutFormValues>({
    resolver: zodResolver(checkoutSchema),
    defaultValues: {
      name: "",
      email: "",
      phone: "",
      location: "",
      notes: "",
    },
  });

  // Handle form submission
  const onSubmit = async (data: CheckoutFormValues) => {
    setIsSubmitting(true);
    
    try {
      // Prepare order data
      const orderData = {
        customerName: data.name,
        customerEmail: data.email,
        customerPhone: data.phone,
        deliveryLocation: data.location,
        notes: data.notes || null,
        totalAmount: cartState.total,
        items: JSON.stringify(cartState.items),
        status: "PENDING",
        paymentMethod: "bank_transfer",
        paymentConfirmed: false
      };

      // Send to API
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || t('checkout.errors.orderCreationFailed'));
      }
      
      setOrderNumber(result.id);
      setShowBankDetails(true);
    } catch (error) {
      console.error("Error creating order:", error);
      form.setError("root", { 
        type: "manual", 
        message: t('checkout.errors.orderCreationFailed')
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCompleteOrder = () => {
    clearCart();
    setOrderConfirmed(true);
    setLocation("/thank-you?order=" + orderNumber);
  };

  // If no items in cart, redirect to products
  if (cartState.items.length === 0 && !showBankDetails && !orderConfirmed) {
    return (
      <div className="container mx-auto px-4 py-16 max-w-6xl">
        <Card className="bg-white shadow-md rounded-lg p-8 text-center">
          <div className="flex flex-col items-center justify-center space-y-4 py-12">
            <h2 className="text-2xl font-semibold text-gray-700">
              {t('checkout.emptyCart')}
            </h2>
            <p className="text-gray-500 max-w-md">
              {t('checkout.emptyCartMessage')}
            </p>
            <Button 
              onClick={() => setLocation('/products')}
              className="mt-4 bg-yellow-500 hover:bg-yellow-600 text-black"
            >
              {t('checkout.browseProducts')}
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  // Step 1: Show checkout form
  if (!showBankDetails) {
    return (
      <div className="container mx-auto px-4 py-16 max-w-6xl">
        <Helmet>
          <title>{t('checkout.pageTitle')} | Rammeh MotoScoot</title>
          <meta name="description" content={t('checkout.pageDescription')} />
        </Helmet>
        
        <div className={`flex items-center mb-8 ${isRTL ? 'flex-row-reverse' : ''}`}>
          <Button 
            variant="ghost" 
            onClick={() => setLocation('/cart')}
            className={`${isRTL ? 'ml-4' : 'mr-4'}`}
          >
            <ArrowLeft className={isRTL ? 'rotate-180' : ''} size={16} />
            <span className="ml-2">{t('checkout.backToCart')}</span>
          </Button>
          <h1 className="text-3xl font-bold">{t('checkout.title')}</h1>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <Card className="bg-white shadow-md rounded-lg">
              <CardHeader>
                <CardTitle>{t('checkout.customerInfo')}</CardTitle>
              </CardHeader>
              <CardContent>
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem className={isRTL ? 'text-right' : ''}>
                          <FormLabel>{t('checkout.formLabels.fullName')}</FormLabel>
                          <FormControl>
                            <Input
                              placeholder={t('checkout.formLabels.fullNamePlaceholder')}
                              dir={isRTL ? 'rtl' : 'ltr'}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem className={isRTL ? 'text-right' : ''}>
                            <FormLabel>{t('checkout.formLabels.email')}</FormLabel>
                            <FormControl>
                              <Input
                                type="email"
                                placeholder={t('checkout.formLabels.emailPlaceholder')}
                                dir={isRTL ? 'rtl' : 'ltr'}
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="phone"
                        render={({ field }) => (
                          <FormItem className={isRTL ? 'text-right' : ''}>
                            <FormLabel>{t('checkout.formLabels.phone')}</FormLabel>
                            <FormControl>
                              <Input
                                placeholder={t('checkout.formLabels.phonePlaceholder')}
                                dir={isRTL ? 'rtl' : 'ltr'}
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <FormField
                      control={form.control}
                      name="location"
                      render={({ field }) => (
                        <FormItem className={isRTL ? 'text-right' : ''}>
                          <FormLabel>{t('checkout.formLabels.address')}</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder={t('checkout.formLabels.addressPlaceholder')}
                              dir={isRTL ? 'rtl' : 'ltr'}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="notes"
                      render={({ field }) => (
                        <FormItem className={isRTL ? 'text-right' : ''}>
                          <FormLabel>{t('checkout.formLabels.notes')}</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder={t('checkout.formLabels.notesPlaceholder')}
                              dir={isRTL ? 'rtl' : 'ltr'}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    {form.formState.errors.root && (
                      <Alert variant="destructive">
                        <AlertTitle>{t('checkout.errorTitle')}</AlertTitle>
                        <AlertDescription>
                          {form.formState.errors.root.message}
                        </AlertDescription>
                      </Alert>
                    )}
                    
                    <Button 
                      type="submit" 
                      className="w-full bg-yellow-500 hover:bg-yellow-600 text-black"
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? t('checkout.processing') : t('checkout.continueToPayment')}
                    </Button>
                  </form>
                </Form>
              </CardContent>
            </Card>
          </div>
          
          <div className="lg:col-span-1">
            <Card className="bg-white shadow-md rounded-lg sticky top-24">
              <CardHeader>
                <CardTitle>{t('checkout.orderSummary')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {cartState.items.map((item) => (
                    <div key={item.product.id} className={`flex ${isRTL ? 'flex-row-reverse' : ''}`}>
                      <div className={`${isRTL ? 'ml-3' : 'mr-3'} flex-none`}>
                        <span className="bg-gray-100 rounded-full w-6 h-6 flex items-center justify-center text-sm">
                          {item.quantity}
                        </span>
                      </div>
                      <div className="flex-grow">
                        <p className={`font-medium ${isRTL ? 'text-right' : ''}`}>{item.product.name}</p>
                      </div>
                      <div className={`${isRTL ? 'ml-4' : 'ml-auto'} text-right`}>
                        {formatPrice(item.product.price * item.quantity)}
                      </div>
                    </div>
                  ))}
                  
                  <Separator />
                  
                  <div className={`flex justify-between ${isRTL ? 'flex-row-reverse' : ''}`}>
                    <span>{t('checkout.subtotal')}</span>
                    <span>{formatPrice(cartState.total)}</span>
                  </div>
                  
                  <div className={`flex justify-between ${isRTL ? 'flex-row-reverse' : ''}`}>
                    <span>{t('checkout.shipping')}</span>
                    <span>{t('checkout.toBeCalculated')}</span>
                  </div>
                  
                  <Separator />
                  
                  <div className={`flex justify-between font-bold ${isRTL ? 'flex-row-reverse' : ''}`}>
                    <span>{t('checkout.total')}</span>
                    <span className="text-yellow-500">{formatPrice(cartState.total)}</span>
                  </div>
                  
                  <div className="mt-4 bg-gray-50 p-4 rounded-lg">
                    <div className={`flex items-start ${isRTL ? 'flex-row-reverse text-right' : ''}`}>
                      <CreditCard className={`${isRTL ? 'ml-3' : 'mr-3'} flex-shrink-0 mt-1 text-yellow-500`} size={18} />
                      <div>
                        <p className="font-semibold">{t('checkout.paymentMethod.title')}</p>
                        <p className="text-sm text-gray-600 mt-1">
                          {t('checkout.paymentMethod.description')}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }
  
  // Step 2: Show bank details and WhatsApp contact button
  return (
    <div className="container mx-auto px-4 py-16 max-w-6xl">
      <Helmet>
        <title>{t('checkout.paymentTitle')} | Rammeh MotoScoot</title>
      </Helmet>
      
      <Card className="bg-white shadow-md rounded-lg max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle className={`text-center text-2xl ${isRTL ? 'text-right' : ''}`}>
            {t('checkout.bankTransferTitle')}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <Alert className="bg-yellow-50 border-yellow-500">
            <AlertTitle className="text-yellow-800 font-bold flex items-center">
              <CreditCard className={`${isRTL ? 'ml-2' : 'mr-2'} text-yellow-500`} size={18} />
              {t('checkout.bankDetailsTitle')}
            </AlertTitle>
            <AlertDescription className="mt-2 text-gray-700">
              <div className="space-y-2">
                <p>
                  <span className="font-semibold">{t('checkout.bankName')}:</span> Banque Nationale Agricole (BNA)
                </p>
                <p>
                  <span className="font-semibold">{t('checkout.accountHolder')}:</span> Rammeh MotoScoot SARL
                </p>
                <p>
                  <span className="font-semibold">IBAN:</span> TN59 01 004 0125000008602 87
                </p>
                <p>
                  <span className="font-semibold">{t('checkout.reference')}:</span> {t('checkout.orderNumber')} {orderNumber}
                </p>
              </div>
            </AlertDescription>
          </Alert>
          
          <div className="border rounded-lg p-4 bg-gray-50">
            <p className={`font-semibold mb-2 ${isRTL ? 'text-right' : ''}`}>
              {t('checkout.nextStepsTitle')}:
            </p>
            <ol className={`list-decimal ${isRTL ? 'mr-5 text-right' : 'ml-5'} space-y-2`}>
              <li>{t('checkout.step1')}</li>
              <li>{t('checkout.step2')} <span className="font-semibold">{orderNumber}</span></li>
              <li>{t('checkout.step3')}</li>
              <li>{t('checkout.step4')}</li>
            </ol>
          </div>
          
          <div className="flex flex-col items-center space-y-4">
            <p className="text-center font-medium text-gray-700">
              {t('checkout.contactUsAfterPayment')}
            </p>
            
            <a 
              href={`https://wa.me/21658274563?text=${encodeURIComponent(
                `${t('checkout.whatsappMessage')} ${orderNumber}`
              )}`}
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center justify-center bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-colors w-full max-w-sm"
            >
              <svg viewBox="0 0 32 32" className="w-5 h-5 mr-3 fill-current" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.042 24c-4.825 0-8.75-3.925-8.75-8.75v-.137c.004-1.633.471-3.23 1.351-4.61l-1.555-4.649c-.047-.137-.016-.289.08-.397s.247-.172.399-.16c2.011.172 3.948.754 5.716 1.703 1.01-.344 2.067-.518 3.131-.516 4.825 0 8.75 3.925 8.75 8.75s-3.925 8.75-8.75 8.75l-.172.016zm-.042-16.5c-.987.002-1.965.167-2.893.488-.119.041-.248.033-.362-.024-.717-.363-1.466-.647-2.235-.848l.891 2.669c.051.15.019.316-.084.438-.814.95-1.254 2.156-1.24 3.396v.131c0 3.722 3.027 6.75 6.75 6.75s6.75-3.027 6.75-6.75-3.027-6.75-6.75-6.75l.173-.016v.016zm1.683 10.074c-.625.313-1.396.547-2.274.516-2.583-.085-4.659-2.156-4.738-4.738-.031-.879.198-1.651.51-2.274l-.313-.621c-.321-.642-.981-.813-1.648-.813-1.494 0-2.955 1.286-2.955 2.613 0 1.328.907 3.153 1.306 3.636.399.482 2.838 4.308 6.866 6.04s4.027.907 4.741.851c.713-.055 2.307-.947 2.632-1.865.326-.918.326-1.704.228-1.865-.099-.162-.36-.259-.753-.429-.394-.17-2.328-1.147-2.686-1.277-.36-.13-.61-.195-.871.196-.26.391-.999 1.27-1.222 1.528-.224.259-.445.29-.839.095-.394-.196-1.656-.61-3.157-1.946-1.166-1.041-1.953-2.322-2.175-2.714-.223-.392-.024-.603.168-.798.172-.173.381-.45.571-.675.191-.226.252-.387.379-.645.126-.259.063-.485-.032-.68-.094-.195-.865-2.086-1.188-2.837z" />
              </svg>
              {t('checkout.contactWhatsapp')}
            </a>
            
            <div className={`flex ${isRTL ? 'flex-row-reverse' : ''} space-x-4 rtl:space-x-reverse mt-4`}>
              <Button 
                variant="outline" 
                onClick={() => setShowBankDetails(false)}
              >
                {t('checkout.backToForm')}
              </Button>
              <Button 
                onClick={handleCompleteOrder}
                className="bg-yellow-500 hover:bg-yellow-600 text-black"
              >
                {t('checkout.finalizeOrder')}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Checkout;